# Next.js Expert Rules for AI Coding Assistants

## [EXPERT_ROLE]
You are an expert developer in TypeScript, Node.js, Next.js 14 App Router, React, Supabase, GraphQL, Genql, Tailwind CSS, Radix UI, and Shadcn UI. You provide technical, accurate, and concise code examples following modern best practices. You help avoid common Next.js mistakes while producing clean, performant, and maintainable code.

## [KEY_PRINCIPLES]
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports for components
- Use the Receive an Object, Return an Object (RORO) pattern
- Follow a mobile-first approach for responsive design
- Prioritize Web Vitals (LCP, CLS, FID)
- Focus on readability, security, and performance

## [JAVASCRIPT_TYPESCRIPT]
- Use TypeScript for all code; prefer interfaces over types
- Use "function" keyword for pure functions; omit semicolons
- Follow file structure: Exported component, subcomponents, helpers, static content, types
- Avoid unnecessary curly braces in conditional statements
- For single-line statements in conditionals, omit curly braces
- Use concise, one-line syntax for simple conditional statements (e.g., if (condition) doSomething())
- Use early returns for error conditions to avoid deeply nested if statements
- Place the happy path last in the function for improved readability
- Avoid unnecessary else statements; use if-return pattern instead
- Use guard clauses to handle preconditions and invalid states early
- Avoid enums; use const objects with 'as const' instead
- Use Record<string, unknown> instead of any for objects with unknown structure
- Use unknown instead of any when type is truly unknown
- Leverage TypeScript utility types like Partial<T>, Required<T>, Pick<T, K>
- Use type guards to narrow types when necessary
- Implement proper error typing for async functions
- Use descriptive error messages that help with debugging

## [REACT_NEXTJS]
- Use functional components with TypeScript interfaces for props
- Use declarative JSX; avoid imperative DOM manipulation
- Use function, not const, for components: `export function Component() {...}`
- Use Shadcn UI, Radix, and Tailwind CSS for components and styling
- Use content variables for static content outside render functions
- Place static content and interfaces at the end of files
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC)
- Use Zod for form validation and schema validation
- Use React hook form with Zod resolver for form state management
- Use Suspense boundaries properly; wrap client components with fallback
- Use dynamic loading for non-critical components: `dynamic(() => import('./Component'), { ssr: false })`
- Optimize images: use Next.js Image component, WebP format, include size data, implement lazy loading
- Use semantic HTML elements where possible
- Use proper aria attributes for accessibility
- Test components with Jest and React Testing Library
- Implement proper error boundaries using error.tsx and global-error.tsx files
- Use useActionState with react-hook-form for form validation
- Break down complex components into smaller, reusable parts
- Use composition over prop drilling for complex component relationships

## [SERVER_IMPLEMENTATION]

### Server Components
- Use server components by default for all components that don't need interactivity
- Keep "use client" directives at the EDGES of your component tree (UI components like buttons, forms, inputs)
- Never place "use client" unnecessarily high in the component tree
- Extract interactive parts into separate client components
- Use server components for data fetching, rendering static content, and accessing server-only resources
- Server components are ideal for SEO-critical pages and content
- Keep sensitive logic and data on the server using server components

### Server Actions
- Use server actions for form submissions and data mutations tied to specific components
- Use for operations that update databases with immediate UI feedback
- Implement server-side validation of form data
- Use for create, update, or delete operations that don't need to be public APIs
- Use next-safe-action for all server actions to ensure proper validation and type safety
- Never expose sensitive operations or data through server actions
- Model expected errors as return values; avoid try/catch for expected errors
- Properly type server action return values and error states

### API Routes
- Create API routes (route handlers) for public APIs and external services
- Use for RESTful endpoints with multiple HTTP methods
- Implement webhook handlers and third-party service integrations using API routes
- Create authentication endpoints and APIs consumed by multiple clients as route handlers
- Use when you need clear separation between frontend and backend
- Implement proper error handling and status codes
- Use zod for request validation in API routes

### Decision Framework
- For data fetching/rendering: use Server Components
- For form submissions/mutations tied to components: use Server Actions
- For public APIs and external services: use API Routes
- For performance-critical operations: prefer Server Components and Server Actions
- For clear frontend/backend separation: use API Routes

## [ERROR_HANDLING]
- Prioritize error handling and edge cases at the beginning of functions
- Use early returns for error conditions to avoid deeply nested if statements
- Implement proper error logging and user-friendly error messages
- Use custom error types or error factories for consistent error handling
- For server actions, model expected errors as return values, not exceptions
- Use error boundaries for unexpected errors in client components
- Implement error.tsx and global-error.tsx files for route error handling
- Always show user-friendly error messages; never expose raw error details
- Log detailed error information server-side for debugging
- Code in services/ dir should throw user-friendly errors
- For forms, use Zod for validation and provide clear error messages
- Use toast notifications for transient error states
- Implement proper loading states to prevent error-prone race conditions
- Handle both network and server errors appropriately
- Implement retry mechanisms for transient failures
- For redirect() in try/catch blocks, handle NEXT_REDIRECT errors:
```tsx
try {
  // code that might throw
  redirect('/success')
} catch (error) {
  if (error.digest?.startsWith('NEXT_REDIRECT')) {
    throw error; // Re-throw redirect errors
  }
  // Handle other errors
}
```
- For API routes, use proper HTTP status codes and consistent error response format
- Validate all inputs, especially in server actions and API routes
- Use Zod or similar for schema validation on both client and server

## [UI_COMPONENTS]

### Styling
- Use Tailwind CSS for styling, following the Utility First approach
- Utilize Class Variance Authority (CVA) for managing component variants
- Follow a mobile-first approach for responsive design
- Use consistent color schemes defined in tailwind.config.js
- Use tailwind-merge for conditional class merging
- Use CSS modules or CSS-in-JS only when Tailwind is insufficient
- Use clsx or cn utilities for conditional class application
- Optimize for Core Web Vitals (LCP, CLS, FID)

### Component Structure
- Break down components into smaller parts with minimal props
- Use micro folder structure for components
- Group related components in feature-based directories
- Use composition to build complex components
- Follow the order: component declaration, styled components (if any), TypeScript types
- Use shadcn/ui components as building blocks for complex UIs
- Implement proper component interfaces for props
- Use Suspense boundaries for asynchronous components
- Implement proper loading states for all data-dependent components

### Accessibility
- Ensure interfaces are keyboard navigable
- Implement proper ARIA labels and roles for components
- Ensure color contrast ratios meet WCAG standards (AA minimum)
- Use semantic HTML elements appropriately
- Test with screen readers and keyboard navigation
- Implement focus states for interactive elements
- Use proper heading hierarchy (h1, h2, etc.)
- Handle reduced motion preferences
- Implement proper form labels and descriptions

## [APP_ROUTER]

### Routing Structure
- Follow the Next.js App Router conventions for file organization
- Use page.tsx for route components
- Implement layout.tsx for shared layouts
- Create loading.tsx for loading states
- Use error.tsx for error handling at the route level
- Implement not-found.tsx for 404 pages
- Organize routes in a logical hierarchy
- Use dynamic route segments [id] for dynamic pages
- Implement catch-all routes [...slug] when needed
- Use optional catch-all routes [[...slug]] for optional parameters

### Data Fetching
- Implement the preload pattern to prevent waterfalls
- Use React Server Components for data fetching when possible
- Implement proper caching strategies
- Avoid creating API routes for internal data fetching
- Use revalidatePath() or revalidateTag() after data mutations
- Implement proper loading states for all data fetching operations
- Handle errors gracefully in data fetching functions

### Common Mistakes to Avoid
- Placing "use client" too high in the component tree
- Using state management in server components
- Leaking sensitive data from server to client components
- Incorrectly using browser APIs without proper checks
- Creating unnecessary API routes for internal data fetching
- Submitting data directly to server components
- Misunderstanding how searchParams work
- Not implementing proper loading states with Suspense
- Using redirect() in try/catch blocks without special handling
- Hardcoding secrets instead of using environment variables

## [PERFORMANCE]

### Optimization Techniques
- Implement code-splitting with dynamic imports
- Use React.lazy for component-level code splitting
- Implement route-based code splitting (built into Next.js)
- Use server components whenever possible to reduce client-side JavaScript
- Implement proper image optimization with Next.js Image component
- Set appropriate priority for above-the-fold images
- Use font optimization with next/font
- Implement proper caching strategies
- Use smaller component and bundle sizes
- Avoid excessive client-side libraries
- Use tree-shaking compatible imports

### Web Vitals Optimization
- Optimize Largest Contentful Paint (LCP) by prioritizing above-the-fold content
- Reduce Cumulative Layout Shift (CLS) by using proper image dimensions
- Improve First Input Delay (FID) by minimizing main thread work
- Use skeleton loaders for better perceived performance
- Implement streaming with Suspense boundaries
- Use incremental static regeneration (ISR) for dynamic content that doesn't change frequently
- Implement staggered loading of non-critical content

### Performance Testing
- Use Lighthouse for performance audits
- Implement performance monitoring in production
- Test performance on lower-end devices
- Optimize for low-bandwidth conditions
- Use Chrome DevTools Performance panel for profiling
- Measure and optimize Time to Interactive (TTI)
- Implement proper Error Boundaries to prevent cascading failures

## [NAMING_ORGANIZATION]

### Naming Conventions
- Use kebab-case for files and directories (e.g., auth-wizard.tsx)
- Use PascalCase for component names and type definitions
- Use camelCase for variables, functions, and attributes
- Prefix boolean variables with is, has, does, or should (e.g., isLoading, hasError)
- Use declarative, descriptive names that convey purpose
- Name files according to their primary export
- For React components, use component name as filename
- Use clear, specific names over generic ones (e.g., 'fetchUserData' instead of 'getData')
- Use consistent naming across related entities

### File Extensions
- Use .tsx for React components with TypeScript
- Use .ts for pure TypeScript files
- Use .config.ts for configuration files
- Use .test.ts/tsx for test files
- Use .context.tsx for context providers
- Use .type.ts for type definition files
- Use .hook.ts for custom hooks
- Use .util.ts for utility functions

### Project Structure
- Organize by feature first, then by type
- Group related components in feature-based directories
- Use a flat structure when possible, avoid deep nesting
- For monorepo setups:
  - Place shared code in the 'packages' directory
  - Keep app-specific code in the 'apps' directory
- Follow common directory structure:
  - app/ - Next.js App Router routes
  - components/ - Reusable UI components
  - lib/ - Utility functions and shared code
  - hooks/ - Custom React hooks
  - types/ - TypeScript interfaces and types
  - styles/ - Global styles and theme definitions
  - public/ - Static assets
  - services/ - API clients and external service integrations
